// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows","debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id   String @id @default(cuid())
  name String

  Exercise        Exercise[]
  Workouts        Workout[]
  WorkoutsHistory WorkoutsHistory[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Exercise {
  id    String  @id @default(cuid())
  title String
  notes String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  workouts Workout[] @relation("Workout_Exercises")

  createdAt                DateTime                   @default(now()) @map(name: "created_at")
  updatedAt                DateTime                   @updatedAt @map(name: "updated_at")
  WorkoutsHistoryExercises WorkoutsHistoryExercises[]

  @@map(name: "exercises")
}

model Workout {
  id   String @id @default(cuid())
  name String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Exercise          Exercise[]       @relation("Workout_Exercises")
  WorkoutsHistory   WorkoutsHistory? @relation(fields: [workoutsHistoryId], references: [id])
  workoutsHistoryId String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "workouts")
}

model WorkoutsHistory {
  id   String   @id @default(cuid())
  date DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  workout Workout[]

  createdAt                DateTime                   @default(now()) @map(name: "created_at")
  updatedAt                DateTime                   @updatedAt @map(name: "updated_at")
  WorkoutsHistoryExercises WorkoutsHistoryExercises[]

  @@map(name: "workoutsHistory")
}

model WorkoutsHistoryExercises {
  workoutHistory   WorkoutsHistory @relation(fields: [workoutHistoryId], references: [id])
  workoutHistoryId String
  exercise         Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId       String

  reps   Int
  weight Decimal
  RIR    Int?    @default(0)
  RPE    RPE     @relation(fields: [rPEId], references: [id])
  rPEId  String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@id([workoutHistoryId, exerciseId])
  @@map(name: "workoutsHistoryExercises")
}

model RPE {
  id                       String                     @id @default(cuid())
  descrip                  String
  WorkoutsHistoryExercises WorkoutsHistoryExercises[]

  @@map(name: "RPEs")
}
